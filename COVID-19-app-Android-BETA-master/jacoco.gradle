/*
 * Copyright Â© 2020 NHSX. All rights reserved.
 */

def fileFilter = [
    '**/R.class',
    '**/R$*.class',
    '**/BuildConfig.*',
    '**/Manifest*.*',
    '**/*Test*.*',
    '**/com/example/databinding/*',
    '**/com/example/generated/callback/*',
    '**/android/databinding/*',
    '**/androidx/databinding/*',
    '**/di/module/*',
    '**/*MapperImpl*.*',
    '**/*$ViewInjector*.*',
    '**/*$ViewBinder*.*',
    '**/BuildConfig.*',
    '**/*Component*.*',
    '**/*BR*.*',
    '**/Manifest*.*',
    '**/*$Lambda$*.*',
    '**/*Companion*.*',
    '**/*Module.*',
    '**/*Dagger*.*',
    '**/*MembersInjector*.*',
    '**/*_Factory*.*',
    '**/*_Provide*Factory*.*',
    '**/*Extensions*.*',
    '**/*$Result.*', /* filtering `sealed` and `data` classes */
    '**/*$Result$*.*'/* filtering `sealed` and `data` classes */
]

apply plugin: "jacoco"

jacoco { toolVersion = "0.8.5" }

subprojects {
    apply plugin: "jacoco"

    tasks.withType(Test) {
        jacoco.includeNoLocationClasses = true
        jacoco.excludes = ["jdk.internal.*"]
    }
}

project.evaluationDependsOnChildren()

project.afterEvaluate {
    tasks.create(
        name: "jacocoRootReport",
        type: JacocoReport,
    ) {
        def classDirs = []
        def sourceDirs = []
        def executions = []

        subprojects.each { prj ->
            mustRunAfter(prj.testDebugUnitTest)
            mustRunAfter(prj.connectedAndroidTest)

            classDirs += fileTree(dir: "$prj.buildDir/tmp/kotlin-classes/debug", excludes: fileFilter)
            sourceDirs += files("$prj.projectDir/src/main/java")
            executions += "$prj.buildDir/jacoco/testDebugUnitTest.exec"

            fileTree("$prj.buildDir/outputs/code_coverage/debugAndroidTest/connected") {
                include "**/*.ec"
            }.files.each { file ->
                executions += file.absolutePath
            }
        }

        classDirectories.setFrom(files(classDirs))
        additionalSourceDirs.setFrom(*sourceDirs)
        sourceDirectories.setFrom(*sourceDirs)

        executionData(*executions)

        reports {
            html.enabled = true
        }
    }
}
